{
  "api/Unosquare.IO.Ports.StopBits.html": {
    "href": "api/Unosquare.IO.Ports.StopBits.html",
    "title": "Enum StopBits | TinySine Relay Module",
    "keywords": "Enum StopBits Enums the Stop bits Namespace : Unosquare.IO.Ports Syntax public enum StopBits Fields Name Description None One OnePointFive Two <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.TinySine.RelayModule.RelayController.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayController.html",
    "title": "Class RelayController | TinySine Relay Module",
    "keywords": "Class RelayController Inheritance System.Object RelayController Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.TinySine.RelayModule Syntax public class RelayController : IDisposable Constructors RelayController(Action<String>, Action<String>) Initializes a new instance of the RelayController class. Declaration public RelayController(Action<string> trace = null, Action<string> error = null) Parameters Type Name Description System.Action < System.String > trace System.Action < System.String > error Fields DefaultPassword The default password Declaration public const string DefaultPassword = \"123456\" Field Value Type Description System.String Properties BoardModel Gets the board model. Declaration public int BoardModel { get; } Property Value Type Description System.Int32 BoardVersion Gets the board version. Declaration public int BoardVersion { get; } Property Value Type Description System.Int32 Error Gets the error action. Declaration public Action<string> Error { get; } Property Value Type Description System.Action < System.String > FirmwareVersion Gets the firmware version. Declaration public int FirmwareVersion { get; } Property Value Type Description System.Int32 Item[RelayNumber] Gets or sets the state as a System.Boolean value given the relay number. Declaration public bool this[RelayNumber relayNumber] { get; set; } Parameters Type Name Description RelayNumber relayNumber The relay number. Property Value Type Description System.Boolean The System.Boolean . Password Gets the current password Declaration public string Password { get; } Property Value Type Description System.String RelayChannelCount Gets the relay channel count. Declaration public int RelayChannelCount { get; } Property Value Type Description System.Int32 RelayOperatingMode Gets or sets the relay operating mode. When setting the operating mode the relays are reset by setting all highs and then setting all lows. Declaration public RelayOperatingMode RelayOperatingMode { get; set; } Property Value Type Description RelayOperatingMode RelayState01 Gets or sets the state of the relay 1 Declaration public bool RelayState01 { get; set; } Property Value Type Description System.Boolean RelayState02 Gets or sets the state of the relay 2 Declaration public bool RelayState02 { get; set; } Property Value Type Description System.Boolean RelayState03 Gets or sets the state of the relay 3 Declaration public bool RelayState03 { get; set; } Property Value Type Description System.Boolean RelayState04 Gets or sets the state of the relay 4 Declaration public bool RelayState04 { get; set; } Property Value Type Description System.Boolean RelayState05 Gets or sets the state of the relay 5 Declaration public bool RelayState05 { get; set; } Property Value Type Description System.Boolean RelayState06 Gets or sets the state of the relay 6 Declaration public bool RelayState06 { get; set; } Property Value Type Description System.Boolean RelayState07 Gets or sets the state of the relay 7 Declaration public bool RelayState07 { get; set; } Property Value Type Description System.Boolean RelayState08 Gets or sets the state of the relay 8 Declaration public bool RelayState08 { get; set; } Property Value Type Description System.Boolean Temperature Gets the temperature. Declaration public decimal Temperature { get; } Property Value Type Description System.Decimal Trace Gets the trace action. Declaration public Action<string> Trace { get; } Property Value Type Description System.Action < System.String > WorkingVoltage Gets the working voltage. Declaration public byte WorkingVoltage { get; } Property Value Type Description System.Byte Methods ChangePassword(String) Changes the password on the device. Declaration public bool ChangePassword(string sixDigitPassword) Parameters Type Name Description System.String sixDigitPassword The six digit password. Returns Type Description System.Boolean Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() GetRelaysStateDictionary() Gets the state of the relays as a dictionary of relays and their corresponding state. Declaration public Dictionary<RelayNumber, bool> GetRelaysStateDictionary() Returns Type Description System.Collections.Generic.Dictionary < RelayNumber , System.Boolean > Open(String, String) Opens device communication on the specified port name. Declaration public void Open(string portName, string sixDigitPassword = \"123456\") Parameters Type Name Description System.String portName Name of the port. System.String sixDigitPassword The six digit password. Exceptions Type Condition System.InvalidOperationException Close System.Security.SecurityException Invalid password or failed synchronization. System.InvalidOperationException Device is already open. Call the Close method first. Read() Reads data from the serial port asynchronously with the default timeout and no expected packet size Declaration public byte[] Read() Returns Type Description System.Byte [] Read(TimeSpan, Int32) Reads the specified timeout. Declaration public byte[] Read(TimeSpan timeout, int expectedBytes) Parameters Type Name Description System.TimeSpan timeout The timeout. System.Int32 expectedBytes The expected bytes. Returns Type Description System.Byte [] ReadAsync() Reads data from the serial port asynchronously with the default timeout and no expected packet size Declaration public Task<byte[]> ReadAsync() Returns Type Description System.Threading.Tasks.Task < System.Byte []> ReadAsync(TimeSpan, Int32) Reads bytes from the serial port. Declaration public Task<byte[]> ReadAsync(TimeSpan timeout, int expectedBytes) Parameters Type Name Description System.TimeSpan timeout The timeout. System.Int32 expectedBytes The expected bytes. Use a value of zero or less to read until no more bytes are available Returns Type Description System.Threading.Tasks.Task < System.Byte []> Exceptions Type Condition System.InvalidOperationException Open System.InvalidOperationException Open SetRelayStateAll(Boolean) Sets the relay state all. Declaration public bool SetRelayStateAll(bool state) Parameters Type Name Description System.Boolean state if set to true [state]. Returns Type Description System.Boolean VerifyPassword() Verifies the password on the device. Declaration public bool ? VerifyPassword() Returns Type Description System.Nullable < System.Boolean > Write(Byte[]) Writes the specified payload synchronously. Declaration public void Write(byte[] payload) Parameters Type Name Description System.Byte [] payload The payload. WriteAsync(Byte[]) Writes data to the serial port asynchronously Declaration public Task WriteAsync(byte[] payload) Parameters Type Name Description System.Byte [] payload The payload. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.InvalidOperationException Implements System.IDisposable <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.TinySine.RelayModule.RelayOperatingMode.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayOperatingMode.html",
    "title": "Enum RelayOperatingMode | TinySine Relay Module",
    "keywords": "Enum RelayOperatingMode Enumerates the relay board operating modes Namespace : Unosquare.TinySine.RelayModule Syntax public enum RelayOperatingMode : byte Fields Name Description Latching The latching mode Momentary The momentary mode <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.TinySine.RelayModule.html": {
    "href": "api/Unosquare.TinySine.RelayModule.html",
    "title": "Namespace Unosquare.TinySine.RelayModule | TinySine Relay Module",
    "keywords": "Namespace Unosquare.TinySine.RelayModule Classes RelayController Enums RelayNumber Enumerates the relay numbers on the relay board RelayOperatingMode Enumerates the relay board operating modes <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "TinySine USB/Wireless Relay Module TOSR1x - Interfacing Library for .NET | TinySine Relay Module",
    "keywords": "TinySine USB/Wireless Relay Module TOSR1x - Interfacing Library for .NET Product Page: http://www.tinyosshop.com/index.php?route=product/product&path=141_142&product_id=947 Features All documented commands are implemented (2016-11-06) No dependencies Nice sample application included for testing MIT License NuGet Installation PM> Install-Package Unosquare.TinySine.RelayModule Usage using (var controller = new RelayController()) { controller.open(\"COM4\", RelayController.DefaultPassword); controller[RelayNumber.Relay01] = true; controller[RelayNumber.Relay02] = false; controller.RelayOperatingMode = RelayOperatingMode.Momentary; Console.WriteLine($\"Board: Model: {controller.BoardModel}, Version: {controller.BoardVersion}, FW: {controller.FirmwareVersion}, Channels: {controller.RelayChannelCount}, Mode: {controller.RelayOperatingMode}\"); controller.SetRelayStateAll(false); } .NET Core 2 for Raspberry Pi 3 Implementing .NET Core 2 in your projects running on Ubuntu Classic Server 16.04 for Raspberry PI 3. This example uses the Sample project You need to have: .NET Core SDK installed on your machine. Visual Studio 2017 Ubuntu Classic Server 16.04 for Raspberry PI 3. 7zip Win32DiskImage Highly recommend that you use a Class 6 or Class 10 microSD HC card. Configuring Ubuntu on the Raspberry If you already have installed all you need: Extract and Write Ubuntu Classic Server into your SD Card Plugin your SD Card into your Raspberry and start it It's going to ask you for login and password, the defaults are ubuntu/ubuntu Install the Wiring Pi dependency (Needed it to access the serial port). Installing .NET Core Run the fallowing commands in your Raspberry Pi # Update Ubuntu 16.04 sudo apt-get -y update # Install the packages necessary for .NET Core sudo apt-get -y install libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev # Download the latest binaries for .NET Core 2 wget https://dotnetcli.blob.core.windows.net/dotnet/Runtime/release/2.0.0/dotnet-runtime-latest-linux-arm.tar.gz # Make a directory for .NET Core to live in mkdir /home/ubuntu/dotnet # Unzip the binaries into the directory you just created tar -xvf dotnet-runtime-latest-linux-arm.tar.gz -C /home/ubuntu/dotnet # Now add the path to the dotnet executable to the environment path # This ensures the next time you log in, the dotnet exe is on your path echo \"PATH=\\$PATH:/home/ubuntu/dotnet\" >> dotnetcore.sh sudo mv dotnetcore.sh /etc/profile.d # Then run the command below to add the path to the dotnet executable to the current session PATH=$PATH:/home/ubuntu/dotnet After that, you can reboot the raspberry. To check if dotnet is installed just run \"dotnet\" and a message should show. ubuntu@ubuntu:~$ dotnet Usage: dotnet [options] Usage: dotnet [path-to-application] Options: -h|--help Display help. --version Display version. path-to-application: The path to an application .dll file to execute. Configuring Windows and Visual Studio 2017 Once you have all you need: Open the Sample Project You need to edit your csproj to run .NET Core 2, you need to check if the TargetFramework is correct xml <PropertyGroup> <OutputType>Exe</OutputType> <AssemblyTitle>Unosquare.TinySine.RelayModule.Sample</AssemblyTitle> <AssemblyName>Unosquare.TinySine.RelayModule.Sample</AssemblyName> <PackageId>Unosquare.TinySine.RelayModule.Sample</PackageId> <TargetFramework>netcoreapp2.0</TargetFramework> </PropertyGroup> Rebuild the Sample project Open the Package Manager Console Type // If you have more than one project, you need to specify the project to restore the packages PM> dotnet restore .\\Unosquare.TinySine.RelayModule.Sample // If you have more than one project, you need to specify the project to publish the packages PM> dotnet publish -r ubuntu.16.04-arm .\\Unosquare.TinySine.RelayModule.Sample Find the publish files, usually located in C:\\~\\Unosquare.TinySine.RelayModule.Sample\\bin\\Debug\\netcoreapp2.0\\ubuntu.16.04-arm\\publish Running the project Once you have published the project you need to pass the publish folder to the Raspberry Pi, you can use ssh or an usb to do that, and if you want, you can rename the folder. We just pass the publish folder. In the Raspberry, you need to do: Navigate to the projects folder ubuntu@ubuntu:~$ cd publish ubuntu@ubuntu:~/publish$ Give permissions to run the project ubuntu@ubuntu:~/publish$ sudo chmod u+x * Run the project ubuntu@ubuntu:~/publish$ ./Unosquare.TinySine.RelayModule.Sample Missing Stuff Some more testing is needed"
  },
  "api/Unosquare.IO.Ports.Parity.html": {
    "href": "api/Unosquare.IO.Ports.Parity.html",
    "title": "Enum Parity | TinySine Relay Module",
    "keywords": "Enum Parity Enums the parity modes Namespace : Unosquare.IO.Ports Syntax public enum Parity Fields Name Description Even Mark None Odd Space <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.IO.Ports.SerialPort.html": {
    "href": "api/Unosquare.IO.Ports.SerialPort.html",
    "title": "Class SerialPort | TinySine Relay Module",
    "keywords": "Class SerialPort Represents a Serial Port component Inheritance System.Object SerialPort Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.IO.Ports Syntax public class SerialPort Constructors SerialPort() Initializes a new instance of the SerialPort class. Declaration public SerialPort() SerialPort(String) Initializes a new instance of the SerialPort class. Declaration public SerialPort(string portName) Parameters Type Name Description System.String portName Name of the port. SerialPort(String, Int32, Parity, Int32, StopBits) Initializes a new instance of the SerialPort class. Declaration public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits) Parameters Type Name Description System.String portName Name of the port. System.Int32 baudRate The baud rate. Parity parity The parity. System.Int32 dataBits The data bits. StopBits stopBits The stop bits. Fields InfiniteTimeout Declaration public const int InfiniteTimeout = -1 Field Value Type Description System.Int32 Properties BaseStream Gets the base stream. Declaration public Stream BaseStream { get; } Property Value Type Description Stream The base stream. BaudRate Gets or sets the baud rate. Declaration public int BaudRate { get; set; } Property Value Type Description System.Int32 The baud rate. BytesToRead Gets the bytes to read. Declaration public int BytesToRead { get; } Property Value Type Description System.Int32 The bytes to read. BytesToWrite Declaration public int BytesToWrite { get; } Property Value Type Description System.Int32 DataBits Declaration public int DataBits { get; set; } Property Value Type Description System.Int32 Encoding Gets or sets the encoding. Declaration public Encoding Encoding { get; set; } Property Value Type Description Encoding The encoding. Handshake Declaration public Handshake Handshake { get; set; } Property Value Type Description Unosquare.IO.Ports.Handshake IsOpen Gets a value indicating whether this instance is open. Declaration public bool IsOpen { get; } Property Value Type Description System.Boolean true if this instance is open; otherwise, false . NewLine Gets or sets the new line. Declaration public string NewLine { get; set; } Property Value Type Description System.String The new line. Parity Gets or sets the parity. Declaration public Parity Parity { get; set; } Property Value Type Description Parity The parity. PortName Gets or sets the name of the port. Declaration public string PortName { get; set; } Property Value Type Description System.String The name of the port. ReadBufferSize Gets or sets the size of the read buffer. Declaration public int ReadBufferSize { get; set; } Property Value Type Description System.Int32 The size of the read buffer. ReadTimeout Gets or sets the read timeout. Declaration public int ReadTimeout { get; set; } Property Value Type Description System.Int32 The read timeout. StopBits Gets or sets the stop bits. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits The stop bits. WriteBufferSize Gets or sets the size of the write buffer. Declaration public int WriteBufferSize { get; set; } Property Value Type Description System.Int32 The size of the write buffer. WriteTimeout Gets or sets the write timeout. Declaration public int WriteTimeout { get; set; } Property Value Type Description System.Int32 The write timeout. Methods Close() Closes this instance. Declaration public void Close() DiscardInBuffer() Declaration public void DiscardInBuffer() DiscardOutBuffer() Declaration public void DiscardOutBuffer() Dispose() Releases unmanaged and - optionally - managed resources. Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. GetPortNames() Gets the port names. Declaration public static string[] GetPortNames() Returns Type Description System.String [] Open() Opens this instance. Declaration public void Open() Read(Byte[], Int32, Int32) Reads the specified buffer. Declaration public int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer. System.Int32 offset The offset. System.Int32 count The count. Returns Type Description System.Int32 Read(Char[], Int32, Int32) Reads the specified buffer. Declaration public int Read(char[] buffer, int offset, int count) Parameters Type Name Description System.Char [] buffer The buffer. System.Int32 offset The offset. System.Int32 count The count. Returns Type Description System.Int32 ReadByte() Reads the byte. Declaration public int ReadByte() Returns Type Description System.Int32 ReadChar() Reads the character. Declaration public int ReadChar() Returns Type Description System.Int32 ReadExisting() Declaration public string ReadExisting() Returns Type Description System.String ReadLine() Reads the line. Declaration public string ReadLine() Returns Type Description System.String ReadTo(String) Reads to. Declaration public string ReadTo(string value) Parameters Type Name Description System.String value The value. Returns Type Description System.String Write(Byte[], Int32, Int32) Writes the specified buffer. Declaration public void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer. System.Int32 offset The offset. System.Int32 count The count. Write(Char[], Int32, Int32) Writes the specified buffer. Declaration public void Write(char[] buffer, int offset, int count) Parameters Type Name Description System.Char [] buffer The buffer. System.Int32 offset The offset. System.Int32 count The count. Write(String) Writes the specified text. Declaration public void Write(string text) Parameters Type Name Description System.String text The text. WriteLine(String) Writes the line. Declaration public void WriteLine(string text) Parameters Type Name Description System.String text The text. <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.IO.Ports.html": {
    "href": "api/Unosquare.IO.Ports.html",
    "title": "Namespace Unosquare.IO.Ports | TinySine Relay Module",
    "keywords": "Namespace Unosquare.IO.Ports Classes SerialPort Represents a Serial Port component Enums Parity Enums the parity modes StopBits Enums the Stop bits <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.TinySine.RelayModule.RelayNumber.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayNumber.html",
    "title": "Enum RelayNumber | TinySine Relay Module",
    "keywords": "Enum RelayNumber Enumerates the relay numbers on the relay board Namespace : Unosquare.TinySine.RelayModule Syntax public enum RelayNumber : byte Fields Name Description Relay01 Relay02 Relay03 Relay04 Relay05 Relay06 Relay07 Relay08 <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}