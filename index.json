{
  "api/Unosquare.TinySine.RelayModule.RelayController.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayController.html",
    "title": "Class RelayController | TinySine Relay Module",
    "keywords": "Class RelayController Inheritance System.Object RelayController Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.TinySine.RelayModule Assembly : cs.temp.dll.dll Syntax public class RelayController : IDisposable Constructors RelayController(Action<String>, Action<String>) Initializes a new instance of the RelayController class. Declaration public RelayController(Action<string> trace = null, Action<string> error = null) Parameters Type Name Description System.Action < System.String > trace System.Action < System.String > error Fields DefaultPassword The default password Declaration public const string DefaultPassword = \"123456\" Field Value Type Description System.String Properties BoardModel Gets the board model. Declaration public int BoardModel { get; } Property Value Type Description System.Int32 BoardVersion Gets the board version. Declaration public int BoardVersion { get; } Property Value Type Description System.Int32 Error Declaration public Action<string> Error { get; } Property Value Type Description System.Action < System.String > FirmwareVersion Gets the firmware version. Declaration public int FirmwareVersion { get; } Property Value Type Description System.Int32 Item[RelayNumber] Gets or sets the state as a System.Boolean value given the relay number. Declaration public bool this[RelayNumber relayNumber] { get; set; } Parameters Type Name Description RelayNumber relayNumber The relay number. Property Value Type Description System.Boolean The System.Boolean . Password Gets the current password Declaration public string Password { get; } Property Value Type Description System.String RelayChannelCount Gets the relay channel count. Declaration public int RelayChannelCount { get; } Property Value Type Description System.Int32 RelayOperatingMode Gets or sets the relay operating mode. Wehn setting the operating mode the relays are reset by setting all highs and then setting all lows. Declaration public RelayOperatingMode RelayOperatingMode { get; set; } Property Value Type Description RelayOperatingMode RelayState01 Gets or sets the state of the relay 1 Declaration public bool RelayState01 { get; set; } Property Value Type Description System.Boolean RelayState02 Gets or sets the state of the relay 2 Declaration public bool RelayState02 { get; set; } Property Value Type Description System.Boolean RelayState03 Gets or sets the state of the relay 3 Declaration public bool RelayState03 { get; set; } Property Value Type Description System.Boolean RelayState04 Gets or sets the state of the relay 4 Declaration public bool RelayState04 { get; set; } Property Value Type Description System.Boolean RelayState05 Gets or sets the state of the relay 5 Declaration public bool RelayState05 { get; set; } Property Value Type Description System.Boolean RelayState06 Gets or sets the state of the relay 6 Declaration public bool RelayState06 { get; set; } Property Value Type Description System.Boolean RelayState07 Gets or sets the state of the relay 7 Declaration public bool RelayState07 { get; set; } Property Value Type Description System.Boolean RelayState08 Gets or sets the state of the relay 8 Declaration public bool RelayState08 { get; set; } Property Value Type Description System.Boolean Temperature Gets the temperature. Declaration public decimal Temperature { get; } Property Value Type Description System.Decimal Trace Declaration public Action<string> Trace { get; } Property Value Type Description System.Action < System.String > WorkingVoltage Gets the working voltage. Declaration public byte WorkingVoltage { get; } Property Value Type Description System.Byte Methods ChangePassword(String) Changes the password on the device. Declaration public bool ChangePassword(string sixDigitPassword) Parameters Type Name Description System.String sixDigitPassword The six digit password. Returns Type Description System.Boolean Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetRelaysStateDictionary() Gets the state of the relays as a dictionary of relays and their corresponding state. Declaration public Dictionary<RelayNumber, bool> GetRelaysStateDictionary() Returns Type Description System.Collections.Generic.Dictionary < RelayNumber , System.Boolean > Open(String, String) Opens device communication on the specified port name. Declaration public void Open(string portName, string sixDigitPassword = \"123456\") Parameters Type Name Description System.String portName Name of the port. System.String sixDigitPassword The six digit password. Exceptions Type Condition System.InvalidOperationException Close System.Security.SecurityException Invalid password or failed synchronization. System.InvalidOperationException Device is already open. Call the Close method first. Read() Reads data from the serial port asynchronously with the default timeout and no expected packet size Declaration public byte[] Read() Returns Type Description System.Byte [] Read(TimeSpan, Int32) Reads the specified timeout. Declaration public byte[] Read(TimeSpan timeout, int expectedBytes) Parameters Type Name Description System.TimeSpan timeout The timeout. System.Int32 expectedBytes The expected bytes. Returns Type Description System.Byte [] ReadAsync() Reads data from the serial port asynchronously with the default timeout and no expected packet size Declaration public Task<byte[]> ReadAsync() Returns Type Description System.Threading.Tasks.Task < System.Byte []> ReadAsync(TimeSpan, Int32) Reads bytes from the serial port. Declaration public Task<byte[]> ReadAsync(TimeSpan timeout, int expectedBytes) Parameters Type Name Description System.TimeSpan timeout The timeout. System.Int32 expectedBytes The expected bytes. Use a value of zero or less to read until no more bytes are available Returns Type Description System.Threading.Tasks.Task < System.Byte []> Exceptions Type Condition System.InvalidOperationException Open System.InvalidOperationException Open SetRelayStateAll(Boolean) Sets the relay state all. Declaration public bool SetRelayStateAll(bool state) Parameters Type Name Description System.Boolean state if set to true [state]. Returns Type Description System.Boolean VerifyPassword() Verifies the password on the device. Declaration public bool ? VerifyPassword() Returns Type Description System.Nullable < System.Boolean > Write(Byte[]) Writes the specified payload synchronously. Declaration public void Write(byte[] payload) Parameters Type Name Description System.Byte [] payload The payload. WriteAsync(Byte[]) Writes data to the serial port asynchronously Declaration public Task WriteAsync(byte[] payload) Parameters Type Name Description System.Byte [] payload The payload. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.InvalidOperationException"
  },
  "api/Unosquare.TinySine.RelayModule.RelayOperatingMode.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayOperatingMode.html",
    "title": "Enum RelayOperatingMode | TinySine Relay Module",
    "keywords": "Enum RelayOperatingMode Enumerates the relay board operating modes Namespace : Unosquare.TinySine.RelayModule Assembly : cs.temp.dll.dll Syntax public enum RelayOperatingMode : byte Fields Name Description Latching The latching mode Momentary The momentary mode"
  },
  "api/Unosquare.TinySine.RelayModule.html": {
    "href": "api/Unosquare.TinySine.RelayModule.html",
    "title": "Namespace Unosquare.TinySine.RelayModule | TinySine Relay Module",
    "keywords": "Namespace Unosquare.TinySine.RelayModule Classes RelayController Enums RelayNumber Enumerates the relay numbers on the relay board RelayOperatingMode Enumerates the relay board operating modes"
  },
  "api/Unosquare.TinySine.RelayModule.RelayNumber.html": {
    "href": "api/Unosquare.TinySine.RelayModule.RelayNumber.html",
    "title": "Enum RelayNumber | TinySine Relay Module",
    "keywords": "Enum RelayNumber Enumerates the relay numbers on the relay board Namespace : Unosquare.TinySine.RelayModule Assembly : cs.temp.dll.dll Syntax public enum RelayNumber : byte Fields Name Description Relay01 Relay02 Relay03 Relay04 Relay05 Relay06 Relay07 Relay08"
  },
  "README.html": {
    "href": "README.html",
    "title": "TinySine USB/Wireless Relay Module TOSR1x - Interfacing Library for .NET | TinySine Relay Module",
    "keywords": "TinySine USB/Wireless Relay Module TOSR1x - Interfacing Library for .NET Product Page: http://www.tinyosshop.com/index.php?route=product/product&path=141_142&product_id=947 Features All documented commands are implemented (2016-11-06) No dependencies Nice sample application included for testing MIT License NuGet Installation PM> Install-Package Unosquare.TinySine.RelayModule Usage using (var controller = new RelayController()) { controller.open(\"COM4\", RelayController.DefaultPassword); controller[RelayNumber.Relay01] = true; controller[RelayNumber.Relay02] = false; controller.RelayOperatingMode = RelayOperatingMode.Momentary; Console.WriteLine($\"Board: Model: {controller.BoardModel}, Version: {controller.BoardVersion}, FW: {controller.FirmwareVersion}, Channels: {controller.RelayChannelCount}, Mode: {controller.RelayOperatingMode}\"); controller.SetRelayStateAll(false); } Missing Stuff Some more testing is needed"
  }
}